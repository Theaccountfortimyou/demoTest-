hashmap是线程不安全的，底层是数组，初始容量是16，数组中每一个元素就是一个entry对象
链表节点的是存储元素与存储元素的下一个节点的指针：hash key value next。

jdk1.8之前数组初始容量只有16，如果数据比较多，就记录在链表中，就会导致链表过长。
所以在jdk1.8之后转成数组+红黑树

红黑树：左边的比中间的小，右边的比中间的大，
例如查找7，链表需要7次，红黑树只需要4次。平衡树只需要3次
树：查询快，插入慢。 
在jdk1.8之后引入阀值，当链表节点数超过阀值8的时候链表换成红黑树。


concurrenthashmap相当于多个hashtable。
扩容的时候容易造成线程不安全，导致数据缺失。
扩容的时候数组的下表发生改变，取值的时候容易得到null。

threadpoolexectors 
线程池有四种拒绝策略，默认是abortprociy

mybatis一级缓存cacheenabled，默认是开启的。 

expire：设置key的实效时间
ttl 查看剩余时间
persist：让key取消这个失效时间
select：默认进入的是数据库0 0-15库
randomkey：随机出来一个key
rename：重新命令
type：查看可以的类型
dbsize：查看key的数量
info：查看redis相关信息

ps -ef | grep redis 查询redis的状态

ping：查看连接状态

redis数据类型：string  hash  list  set  zset

增删改放在主库的binlogs里面 binlogs里面有一个节点（position），当数据不一致的时候就会更新到同步


redis事务：multi 开启事务   exec：提交事务

RDB ：save在主线程进行，会阻塞主线程，客户端的请求无法执行
bgsave：执行在子线程，不影响客户端的请求。
60/300/900 保存，统一造成数据丢失

AOF：内容是redis通讯协议（RESP）格式的命令文本存储。
每秒/每个命令/不保存

RDB：数据；AOF：数据+命令
AOF更新频率比RDB高，有限加载AOF
加载的时候没有RDB（数据文件更小）快

复制：主（master）从（slave ）复制，帮master环节压力。

多个redis：复制，哨兵，集群

redis集群：提供多个redis（分布式）节点间共享数据的程序集。
redis集群的键空间被分割为16384个hash槽（solt），集群的最大节点数量也是16384
cluster》node》solt》key

分片：平均分配
数据迁移：方便集群做线性拓展

 数据库索引
explain：查看是否使用索引
索引：帮助mysql高效获取数据的排好序的数据结构，存储在文件里面
索引结构：二叉树，hash，btree
B+Tree每个节点就是一个页，页里面只存储索引，不存储data，所以存的度比较多，效率高。btree是索引+data
索引文件的格式.myi，数据文件的格式.myd 



git的上传需要add，commit push，下载是pull；

springboot的核心就是starter，starter主要是用来简化依赖的；
1.引入父pom 1.jar包的版本统一管理。2.jar包的依赖关系管理（starter启动器，不涉及具体依赖）。

  springboot启动注解：
@enableAutoconfiguration ：开启自动配置功能
@conponentscan（basepackage=（“包名”））
@springbootApplication：相当于组合注解@springbootconfiguration+componentScan+enableAutoConfiguration

springboot热加载
1.加入springloaded（非必要），以及spring-boot-devtools

修改端口：sever.port=8081（在properties配置文件中修改）

mysql优化：
1.sql语句以及索引的优化
优化sql语句的条件：
1.尽量避免耗时操作，带有distinct，union，minus，sort
2.如果无序排除重复值或者操作集无重复则用union。
3.避免在where子语句中使用in， not in，or，having；使用exist与not exist代替。可以使用表连接代替exist，having可以用where代替，如果无法代替就分为两步处理。

2.数据库表结构优化
3.系统配置优化
4.硬件优化


innobd与myisam的区别
innodb：事务优先（适合高并发操作；行锁）
myisam：性能优先 （表锁）

mysql逻辑分层：连接层，服务层，引擎层，存储层。
mysql在5.5之前默认的引擎为myisam，5.5之后默认为innodb；

mysql优化：原因：性能低，执行时间太长，等待时间长，sql语句不好，索引实效
1.sql：
编写过程：select.. distinct  .. from ..join ..on ..where..group by ..having.. order by.. ..limit；
解析过程：from .. on  ..join  ..where.. group by.. having.. select.. distinct .. order by.. limit；

2.sql优化：主要是在优化索引
索引：相当于数的目录，是帮助mysql高效获取数据的数据结构，索引是数据结果
Btree的结构是小的放左边，大的放右边，
索引的弊端：
1.索引本身很大，要占内存。
2.数据量少或者字段频繁更新以及很少使用的字段。
3.索引会降低增删改的效率。
索引的优势：
1.提高查询效率（降低了IO的使用率）
2.降低CPU的使用率。（order by age desc；因为btree索引自身以及排好序）；
 
3层btree可以存放上百万条数据；
btree：一般都是指B+tree，数据全部存放在叶节点中，
b+tree查询任意数据的次数就的n次（n就是b+tree的高度）


索引：
1.单值索引：单列，一个表可以有多个单值索引，如name；
唯一索引：不能重复，如id；唯一索引可以为null，主键索引不行
复合索引：多个列构成的索引 如（name，age）
创建索引：
方式一：创建表后创建索引
create 索引类型 索引名 on 表（字段）；
eg：单值索引： create index  dept_index on tb（dept）；
唯一索引：create unique index name_index on tb（name）；
复合索引：create  index dept_name_index on tb（dept，name）

方式二：
单值索引：alter table tb add index dept_index（dept）
唯一索引：alter table tb add unique index name_index（name）
索引：alter table tb add index dept_name_index（dept，name）
注意：如果一个字段是primary key ；即使没有增加索引，默认就是主键索引。

删除索引：
drop index 索引名 on 表名；drop index name_index on tb；

explain select * from tb；
id/;编号 id相同，从上而下，顺序执行；id值不同，id值越大越优先查询（本质，在子查询的时候，先查询内层，再查外层）。
select_type：查询类型 primary ：包含子查询sql中的主查询（最外层）subquery：包含子查询sql中的子查询（非最外层），simple：简单查询，不包含子查询，union； derived：衍生查询（使用了临时表）
table：表 表的执行顺序是因表中行数的个数改变而改变，数字越小，笛卡尔积就越小。
type：索引类型；system>const>eq_ref>ref>range>index>all 对type进行优化的前提是有索引，越靠前，性能越好。

possible_keys：预测用到的索引
key：实际使用的索引
key_len：实际使用索引的长度
ref：表之间的引用
rows：通过查询索引查询到的数据量。
 
总结：1.如果（a,b,c,d）符合索引和使用的顺序全部一致且不跨列使用，则使用复合索引。
   索引不能跨列使用（最佳左前缀原则），保持索引的定义与使用的顺序一致性
索引需要逐步优化，将含in的范围查询放到where条件的最后，防止失效


锁机制：
按照操作类型分
1.读锁（共享锁）：对同一个数据，多个读动作可以同时进行，互不干扰。
2.写锁（互斥锁）：如果当前没有写操作，则无法进行其它的读操作与写操作
按照操作范围分：
1.表锁：一次性对整张表加锁；如myisam存储引擎使用表锁，开销小，加锁快，无死锁，但是锁的范围大容易发生锁冲突，并发度低。
2.行锁：一次性对一条数据加锁。如innodb存储引擎使用的就是行锁，开销大，加锁慢，容易出现死锁。锁的范围小，不易发生锁冲突，并发度低（发生高并发的概率小，如脏读等 ）

增加锁：lock table 表1 read/write ，表2 read/write ，。。。
加读锁：如果某一个回话对A表加了read锁，则会话可以对A表进行读操作，不能进行写操作，并且，不能对其它表进行读写操作
             会话0给A表加了锁；其他回话的操作；1.可以对其他表进行读写操作；2.对A表可以读，写需要等待锁的释放后才能进行。

加写锁：当前会话可以对价额写锁的表进行任何操作，但是不能操作其它表的增删改查。
             其它会话对会话0加写锁的表，可以进行增删改查，但是需要等待会话0释放锁之后。

主从同步的核心：二进制日志，主库在进行数据改变的时候回存到binary log 中，从库中的IO线程对主要中的二进制日志文件进行读写放到relay log（中继日志文件）中去，relay log通过sql线程将数据写进数据库。


git的安装：选择use git from git bash only。。

配置path：配置道bin目录
配置git：右键-git bash
git config --global user.name “tim”
git config --global user.email   “m18271630827@163.com”
查看：C:\users\tim\.gitconfig
搭建git服务器（远程仓库）：统一的托管网站（https：//GitHub.com）

配置ssh：先在本地配置发送给远程
生成本地ssh：ssh-Keygen -t rsa -c m18271630827@163.com 一直回车
发送给远程：
github - settings - SSH and GPG keys   - newSSH  -title（任意），key中输入刚刚在本地生成的ssh（id_rsa.pub中的内容）；

测试连通性：ssh -T git@GitHub.com  测试成功，则可以在。ssh目录中发现KNOWN_HOSTs文件

在本地新建git项目：在项目根目录   右键 - git bash   - git init
在远程简历git项目：new -建立项目 - 生成  https：//github.com/..

本地项目 - 远程项目关联：git remote add oraigin git@github.com：（原来的地址，也就是上面的..省略的）

ES：默认端口9200




